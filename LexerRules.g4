lexer grammar LexerRules;

ID                : [a-zA-Z_][a-zA-Z_]*(\d*)?;
SET               : 'set';
GETS              : 'gets';
PUTS              : 'puts';
EXPR              : 'expr';
IF                : 'if';
THEN              : 'then';
ELSEIF            : 'elseif';
ELSE              : 'else';
SWITCH            : 'switch';
DEFAULT           : 'default';
WHILE             : 'while';
CONTINUE          : 'continue';
BREAK             : 'break';
INCR              : 'incr';
FOR               : 'for';
SIZE              : 'size';
EXISTS            : 'exists';
ARRAY             : 'array';
PROC              : 'proc';
RETURN            : 'return';
STDIN             : 'stdin';
CASE              : 'case'
TOKEN_IGUAL_STR   : 'eq';
TOKEN_DIFF_STR    : 'ne';
TOKEN_LLAVE_IZQ   : '{';
TOKEN_LLAVE_DER   : '}';
TOKEN_DOLLAR      : '$';
TOKEN_PYC         : ';';
TOKEN_COR_IZQ     : '[';
TOKEN_COR_DER     : ']';
TOKEN_PAR_IZQ     : '(';
TOKEN_PAR_DER     : ')';
TOKEN_MAYOR       : '>';
TOKEN_MENOR       : '<';
TOKEN_MAYOR_IGUAL : '>=';
TOKEN_MENOR_IGUAL : '<=';
TOKEN_IGUAL_NUM   : '==';
TOKEN_DIFF_NUM    : '!=';
TOKEN_AND         : '&&';
TOKEN_OR          : '||';
TOKEN_NOT         : '!';
TOKEN_MAS         : '+';
TOKEN_MENOS       : '-';
TOKEN_MUL         : '*';
TOKEN_DIV         : '/';
TOKEN_MOD         : '%';
TOKEN_POT         : '**';

TOKEN_DOUBLE  : [0-9]+'.'[0-9]+;
TOKEN_INTEGER : [0-9]+;
TOKEN_STRING  : '\"'.+'\"';

NEWLINE  : '\r'? '\n' ;
WS       : [ \t]+ -> skip ;
COMMENTS : '\#'[.]*;
